<div id="shopify-block-ASHVVaUEwejBWU3Zuc__5729741012783295038" class="shopify-block shopify-app-block" data-block-handle="block"><script>
// AI Generator Debug Info
(function() {
    'use strict';

    // Load AI Converter state from metafields
    const aiConverterData = {
        // Product-level settings
        aiEnabled: true,
        lastUpdated: "2025-07-10T08:18:23Z",
        
        // Shop-level settings (from shop metafields)
        enableForAllPages: null,
        enableOnCart: null,
        enableOnCollection: null,
        
        // Current context
        productId: 15020147966338,
        productTitle: "AI Test Poster",
        shopDomain: "product-designer-demo-store.myshopify.com"
    };
    
    // Store globally for debugging
    window.__aiConverterV1 = aiConverterData;
    
    // Store theme editor detection globally
    window.__isThemeEditor = isThemeEditor();
    
    // AI Generation State Management
    window.__aiGenerationState = {
        generationSelected: false,
        generationId: null,
        isInitialized: false
    };

    // Test app proxy connection
    window.__testAppProxy = function() {
        const tests = [
            '/tools/ai-studio/api/hello',
            '/tools/ai-studio/api/test-proxy',
            '/tools/ai-studio/api/secure'
        ];
        
        tests.forEach((url, index) => {
            const testName = ['hello', 'test-proxy', 'secure'][index];
            console.log(`Testing ${testName} at:`, url);
            
            fetch(url)
                .then(res => res.json())
                .then(data => {
                    console.log(`${testName} result:`, data);
                    window[`__${testName.replace('-', '')}Result`] = data;
                })
                .catch(err => {
                    console.error(`${testName} failed:`, err);
                    window[`__${testName.replace('-', '')}Result`] = { error: err.message };
                });
        });
    };

    // Auto-test proxy on load
    setTimeout(() => window.__testAppProxy(), 1000);

    // Theme editor detection
    function isThemeEditor() {
        // Check for theme preview domain
        if (window.location.hostname.includes('.shopifypreview.com')) {
            return true;
        }
        
        // Check for preview theme parameter
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('preview_theme_id')) {
            return true;
        }
        
        // Check if we're in an iframe (theme editor loads site in iframe)
        if (window.top !== window.self || window.parent !== window) {
            return true;
        }
        
        // Check for theme editor specific parameters
        if (urlParams.has('_fd') || urlParams.has('_ab')) {
            return true;
        }
        
        // Check for Shopify admin context
        if (document.querySelector('meta[name="shopify-checkout-api-token"]') && 
            (window.location.search.includes('preview') || window.location.search.includes('theme'))) {
            return true;
        }
        
        return false;
    }

    // Page type detection
    function isProductPage() {
        const href = window.location.href;
        return (
            /.*\.shopifypreview\.com\/products_preview/.test(href) ||
            /\/products\/([A-Za-z0-9-_%]+)(\/)?/.test(href)
        );
    }

    function getPageType() {
        if (/\/cart/.test(window.location.href)) return 'cart';
        if (/\/collections\/([A-Za-z0-9-_%]+)/.test(window.location.href)) return 'collection';
        if (isProductPage()) return 'product';
        if (window.location.pathname === '/' || window.location.pathname === '') return 'home';
        return 'other';
    }

    // Find add to cart button and related buttons
    function findAddToCartButton() {
        // Common selectors for add to cart buttons across themes
        const selectors = [
            'button[name="add"]',
            'input[name="add"]',
            '.btn-product-add',
            '.product-form__cart-submit',
            '.product-form__buttons button[type="submit"]',
            '.product-form button[type="submit"]',
            'button[form*="product"]',
            '.add-to-cart',
            '.add-to-cart-button',
            '.product-add',
            '.btn-addtocart',
            'button:contains("Add to cart")',
            'button:contains("Add to bag")',
            '[data-add-to-cart]'
        ];

        for (const selector of selectors) {
            const button = document.querySelector(selector);
            if (button) {
                // Verify it's actually an add to cart button by checking text content
                const text = button.textContent?.toLowerCase() || '';
                if (text.includes('add') || text.includes('cart') || text.includes('bag') || button.name === 'add') {
                    return button;
                }
            }
        }
        return null;
    }

    // Find product form that contains the actual add to cart button
    function findProductForm() {
        const addToCartButton = findAddToCartButton();
        if (addToCartButton) {
            // Find the form that contains the add to cart button
            const form = addToCartButton.closest('form');
            if (form) return form;
        }

        // Fallback selectors (prefer forms that actually contain add buttons)
        const selectors = [
            'form:has(button[name="add"])',
            'form:has(input[name="add"])',
            'form:has(.add-to-cart)',
            '#product-form-template',
            '.product-form form',
            'form[action*="/cart/add"]'
        ];

        for (const selector of selectors) {
            try {
                const form = document.querySelector(selector);
                if (form) {
                    // Verify this form has submission capability
                    const hasSubmitButton = form.querySelector('button[type="submit"], input[type="submit"], button[name="add"]');
                    if (hasSubmitButton) return form;
                }
            } catch (e) {
                // Skip invalid selectors
                continue;
            }
        }
        
        // Last resort - any cart form
        return document.querySelector('form[action*="/cart/add"]');
    }

    // Find buttons container for overlay (more targeted)
    function findButtonsContainer() {
        const addToCartButton = findAddToCartButton();
        if (!addToCartButton) return null;

        // Look for a specific buttons container first
        const containerSelectors = [
            '.product-form__buttons',
            '.product-buttons',
            '.cart-buttons',
            '.buy-buttons',
            '.purchase-buttons'
        ];

        for (const selector of containerSelectors) {
            const container = document.querySelector(selector);
            if (container && container.contains(addToCartButton)) {
                return container;
            }
        }

        // More conservative fallback: look for immediate parent with multiple buttons
        let parent = addToCartButton.parentElement;
        let attempts = 0;
        while (parent && parent !== document.body && attempts < 3) {
            const buttons = parent.querySelectorAll('button[type="submit"], input[type="submit"], button[name="add"]');
            if (buttons.length >= 1 && parent.offsetHeight < 200) { // Height limit to avoid large containers
                return parent;
            }
            parent = parent.parentElement;
            attempts++;
        }

        // Last resort: just cover the button itself
        return addToCartButton;
    }

    // Generate random UUID
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    // Add hidden fields to product form
    function addHiddenFields() {
        const form = findProductForm();
        if (!form) {
            console.log('⚠️ Product form not found for hidden fields');
            return;
        }

        console.log('✅ Adding fields to form:', form.id || 'no-id', form);

        // Remove existing AI fields if any
        const existingFields = form.querySelectorAll('input[name^="ai_"], input[name^="properties[ai_"]');
        if (existingFields.length > 0) {
            console.log('🔄 Removing', existingFields.length, 'existing AI fields');
            existingFields.forEach(field => field.remove());
        }

        // Only add fields if generation is selected
        if (window.__aiGenerationState.generationSelected && window.__aiGenerationState.generationId) {
            // Line item property for cart display (shows in cart/checkout)
            const lineItemField = document.createElement('input');
            lineItemField.type = 'hidden';
            lineItemField.name = 'properties[AI Generation ID]';
            lineItemField.value = window.__aiGenerationState.generationId;
            form.appendChild(lineItemField);

            // Internal tracking field (for form validation)
            const trackingField = document.createElement('input');
            trackingField.type = 'hidden';
            trackingField.name = 'ai_generation_selected';
            trackingField.value = 'true';
            form.appendChild(trackingField);

            console.log('✅ Added AI line item property:', {
                lineItemProperty: 'AI Generation ID = ' + window.__aiGenerationState.generationId,
                tracking: 'ai_generation_selected = true'
            });
        } else {
            // Just tracking field when no generation selected
            const trackingField = document.createElement('input');
            trackingField.type = 'hidden';
            trackingField.name = 'ai_generation_selected';
            trackingField.value = 'false';
            form.appendChild(trackingField);

            console.log('✅ Added AI tracking field (no generation selected)');
        }
    }

    // Create overlay to disable buttons
    function createButtonsOverlay() {
        const container = findButtonsContainer();
        if (!container) {
            console.log('⚠️ Buttons container not found');
            return;
        }

        // Remove existing overlay
        const existingOverlay = document.getElementById('ai-buttons-overlay');
        if (existingOverlay) existingOverlay.remove();

        const overlay = document.createElement('div');
        overlay.id = 'ai-buttons-overlay';
        overlay.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.05);
            backdrop-filter: blur(1px);
            z-index: 10;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            cursor: not-allowed;
            pointer-events: auto;
        `;

        overlay.innerHTML = `
            <div style="
                background: rgba(255, 255, 255, 0.95);
                padding: 8px 12px;
                border-radius: 4px;
                text-align: center;
                font-size: 12px;
                color: #666;
                font-weight: 500;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                white-space: nowrap;
            ">
                🎨 Select AI first
            </div>
        `;

        // Make container relative if it's not already
        const computedStyle = window.getComputedStyle(container);
        if (computedStyle.position === 'static') {
            container.style.position = 'relative';
        }

        container.appendChild(overlay);
        console.log('✅ Buttons overlay created');
    }

    // Remove buttons overlay
    function removeButtonsOverlay() {
        const overlay = document.getElementById('ai-buttons-overlay');
        if (overlay) {
            overlay.remove();
            console.log('✅ Buttons overlay removed');
        }
    }

    // Update generation state
    function updateGenerationState(selected, generationId = null) {
        window.__aiGenerationState.generationSelected = selected;
        window.__aiGenerationState.generationId = generationId;
        
        // Update hidden fields
        addHiddenFields();
        
        // Update button overlay
        if (selected) {
            removeButtonsOverlay();
        } else {
            createButtonsOverlay();
        }
        
        // Update UI
        updateAIPlaceholderState();
        
        console.log('🔄 Generation state updated:', window.__aiGenerationState);
    }

    // Update AI placeholder state
    function updateAIPlaceholderState() {
        const placeholder = document.getElementById('ai-generator-placeholder');
        if (!placeholder) return;

        const statusBadge = placeholder.querySelector('.ai-status-badge');
        const actionButton = placeholder.querySelector('.ai-action-button');
        
        if (window.__aiGenerationState.generationSelected) {
            if (statusBadge) {
                statusBadge.innerHTML = '✅ Generation Selected';
                statusBadge.style.background = 'rgba(34, 197, 94, 0.9)';
            }
            if (actionButton) {
                actionButton.innerHTML = '🔄 Change Generation';
                actionButton.style.background = 'rgba(255, 255, 255, 0.3)';
            }
        } else {
            if (statusBadge) {
                statusBadge.innerHTML = '🚀 Select AI Style';
                statusBadge.style.background = 'rgba(255, 255, 255, 0.2)';
            }
            if (actionButton) {
                actionButton.innerHTML = '🎨 Generate AI Art';
                actionButton.style.background = 'rgba(255, 255, 255, 0.9)';
                actionButton.style.color = '#667eea';
            }
        }
    }

    // Inject AI placeholder above product form
    function injectAIPlaceholder() {
        // Don't inject if already exists
        if (document.getElementById('ai-generator-placeholder')) {
            return;
        }

        // Find the correct form that contains the add to cart button
        const productForm = findProductForm();
        
        if (!productForm) {
            console.log('⚠️ Product form with add to cart button not found');
            return;
        }

        console.log('✅ Found product form:', productForm.id || 'no-id', productForm);

        const placeholder = document.createElement('div');
        placeholder.id = 'ai-generator-placeholder';
        
        // Different content for theme editor vs live store
        if (isThemeEditor()) {
            // Theme editor - show notification-only version
            placeholder.innerHTML = `
                <div style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 16px;
                    border-radius: 12px;
                    margin-bottom: 16px;
                    text-align: center;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
                    position: relative;
                    overflow: hidden;
                ">
                    <div style="
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 1px, transparent 1px),
                                    radial-gradient(circle at 80% 40%, rgba(255,255,255,0.1) 1px, transparent 1px),
                                    radial-gradient(circle at 40% 80%, rgba(255,255,255,0.1) 1px, transparent 1px);
                        background-size: 50px 50px, 60px 60px, 40px 40px;
                    "></div>
                    <div style="position: relative; z-index: 1;">
                        <div style="font-size: 24px; margin-bottom: 8px;">🎨✨</div>
                        <div style="font-weight: bold; font-size: 16px; margin-bottom: 4px;">AI Art Generation Available!</div>
                        <div style="font-size: 14px; opacity: 0.9; margin-bottom: 12px;">Transform your images with AI magic</div>
                        
                        <div style="
                            background: rgba(255, 255, 255, 0.15);
                            color: rgba(255, 255, 255, 0.9);
                            border: 1px solid rgba(255, 255, 255, 0.3);
                            padding: 8px 16px;
                            border-radius: 20px;
                            font-size: 12px;
                            font-weight: 500;
                            display: inline-block;
                            margin-bottom: 8px;
                            backdrop-filter: blur(10px);
                        ">
                            🎨 Theme Editor Preview
                        </div>
                        
                        <div style="
                            padding: 6px 12px;
                            background: rgba(255, 255, 255, 0.2);
                            border-radius: 15px;
                            display: inline-block;
                            font-size: 12px;
                            font-weight: 600;
                            backdrop-filter: blur(10px);
                        ">
                            🚀 Interactive on Live Store
                        </div>
                    </div>
                </div>
            `;
        } else {
            // Live store - show interactive version
            placeholder.innerHTML = `
                <div style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 16px;
                    border-radius: 12px;
                    margin-bottom: 16px;
                    text-align: center;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
                    position: relative;
                    overflow: hidden;
                ">
                    <div style="
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 1px, transparent 1px),
                                    radial-gradient(circle at 80% 40%, rgba(255,255,255,0.1) 1px, transparent 1px),
                                    radial-gradient(circle at 40% 80%, rgba(255,255,255,0.1) 1px, transparent 1px);
                        background-size: 50px 50px, 60px 60px, 40px 40px;
                    "></div>
                    <div style="position: relative; z-index: 1;">
                        <div style="font-size: 24px; margin-bottom: 8px;">🎨✨</div>
                        <div style="font-weight: bold; font-size: 16px; margin-bottom: 4px;">AI Art Generation Available!</div>
                        <div style="font-size: 14px; opacity: 0.9; margin-bottom: 12px;">Transform your images with AI magic</div>
                        
                        <button class="ai-action-button" style="
                            background: rgba(255, 255, 255, 0.9);
                            color: #667eea;
                            border: none;
                            padding: 12px 24px;
                            border-radius: 25px;
                            font-size: 14px;
                            font-weight: 600;
                            cursor: pointer;
                            backdrop-filter: blur(10px);
                            transition: all 0.3s ease;
                            margin-bottom: 8px;
                            display: block;
                            margin-left: auto;
                            margin-right: auto;
                        ">
                            🎨 Generate AI Art
                        </button>
                        
                        <div class="ai-status-badge" style="
                            padding: 6px 12px;
                            background: rgba(255, 255, 255, 0.2);
                            border-radius: 15px;
                            display: inline-block;
                            font-size: 12px;
                            font-weight: 600;
                            backdrop-filter: blur(10px);
                        ">
                            🚀 Select AI Style
                        </div>
                    </div>
                </div>
            `;

            // Add button click handler (only for live store)
            const actionButton = placeholder.querySelector('.ai-action-button');
            actionButton.addEventListener('click', function() {
                if (window.__aiGenerationState.generationSelected) {
                    // Reset state (change generation)
                    updateGenerationState(false, null);
                    console.log('🔄 Generation reset - user can select new style');
                } else {
                    // Simulate generation selection
                    const fakeGenerationId = generateUUID();
                    updateGenerationState(true, fakeGenerationId);
                    console.log('🎨 Fake generation selected:', fakeGenerationId);
                }
            });

            // Add hover effects (only for live store)
            actionButton.addEventListener('mouseenter', function() {
                this.style.transform = 'scale(1.05)';
                this.style.boxShadow = '0 4px 15px rgba(0,0,0,0.2)';
            });

            actionButton.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1)';
                this.style.boxShadow = 'none';
            });
        }

        // Insert before the product form
        productForm.parentNode.insertBefore(placeholder, productForm);
        
        const mode = isThemeEditor() ? 'theme editor notification' : 'interactive widget';
        console.log(`✅ AI ${mode} injected above product form (${productForm.id || 'no-id'})`);
    }

    // Create debug info div
    function createDebugDiv() {
        const debugDiv = document.createElement('div');
        debugDiv.id = 'ai-debug-info';
        
        const pageType = getPageType();
        const isEditor = isThemeEditor();
        const aiStatus = aiConverterData.aiEnabled === true ? '✅ ENABLED' : 
                        aiConverterData.aiEnabled === false ? '❌ DISABLED' : 
                        '⚠️ NOT SET';

        debugDiv.innerHTML = `
            <div style="
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 12px 16px;
                border-radius: 8px;
                font-family: monospace;
                font-size: 12px;
                z-index: 9999;
                max-width: 320px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.2);
            ">
                <div style="color: #00ff88; font-weight: bold; margin-bottom: 8px;">🤖 AI Generator Debug</div>
                <div><strong>Theme Editor:</strong> ${isEditor ? '🎨 YES' : '🌐 LIVE'}</div>
                <div><strong>Page:</strong> ${pageType}</div>
                <div><strong>Product:</strong> ${aiConverterData.productId || 'N/A'}</div>
                <div><strong>AI Status:</strong> ${aiStatus}</div>
                <div><strong>Generation:</strong> <span id="debug-generation-state">false</span></div>
                <div><strong>Gen ID:</strong> <span id="debug-generation-id">none</span></div>
                <div><strong>Line Item:</strong> <span id="debug-line-item">not set</span></div>
                <div><strong>All Pages:</strong> ${aiConverterData.enableForAllPages || 'false'}</div>
                <div><strong>Cart:</strong> ${aiConverterData.enableOnCart || 'false'}</div>
                <div><strong>Collection:</strong> ${aiConverterData.enableOnCollection || 'false'}</div>
                ${aiConverterData.lastUpdated ? `<div><strong>Updated:</strong> ${new Date(aiConverterData.lastUpdated).toLocaleDateString()}</div>` : ''}
            </div>
        `;

        // Update debug info periodically
        setInterval(() => {
            const genStateEl = debugDiv.querySelector('#debug-generation-state');
            const genIdEl = debugDiv.querySelector('#debug-generation-id');
            const lineItemEl = debugDiv.querySelector('#debug-line-item');
            
            if (genStateEl) {
                genStateEl.textContent = window.__aiGenerationState.generationSelected;
                genStateEl.style.color = window.__aiGenerationState.generationSelected ? '#00ff88' : '#ff6b6b';
            }
            if (genIdEl) {
                genIdEl.textContent = window.__aiGenerationState.generationId || 'none';
            }
            if (lineItemEl) {
                const hasLineItem = window.__aiGenerationState.generationSelected && window.__aiGenerationState.generationId;
                lineItemEl.textContent = hasLineItem ? 'will show in cart' : 'not set';
                lineItemEl.style.color = hasLineItem ? '#00ff88' : '#ff6b6b';
            }
        }, 1000);

        // Add close button
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '×';
        closeBtn.style.cssText = `
            position: absolute;
            top: 5px;
            right: 8px;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
            line-height: 1;
        `;
        closeBtn.onclick = () => debugDiv.remove();
        
        debugDiv.firstElementChild.appendChild(closeBtn);
        document.body.appendChild(debugDiv);

        // Auto-hide after 10 seconds unless hovered
        let timeout = setTimeout(() => {
            if (debugDiv.parentNode) debugDiv.remove();
        }, 10000);

        debugDiv.addEventListener('mouseenter', () => clearTimeout(timeout));
        debugDiv.addEventListener('mouseleave', () => {
            timeout = setTimeout(() => {
                if (debugDiv.parentNode) debugDiv.remove();
            }, 5000);
        });
    }

    // Initialize debug info and AI functionality
    function init() {
        console.log('=== AI Generator Debug Info ===');
        console.log('Theme Editor Mode:', isThemeEditor());
        console.log('Product ID:', aiConverterData.productId);
        console.log('Product Title:', aiConverterData.productTitle);
        console.log('AI Enabled:', aiConverterData.aiEnabled);
        console.log('Page Type:', getPageType());
        console.log('Full Data:', aiConverterData);

        // Initialize AI functionality for product pages when AI is enabled
        // In theme editor, always show functionality for demo purposes
        const shouldShowAI = (aiConverterData.aiEnabled === true && isProductPage()) || 
                            (isThemeEditor() && isProductPage());
        
        if (shouldShowAI) {
            // Wait a bit for the page to fully load before injecting
            setTimeout(() => {
                // Inject AI placeholder (notification-only in theme editor)
                injectAIPlaceholder();
                
                // Only add interactive features on live store
                if (!isThemeEditor()) {
                    // Add hidden fields to form
                    addHiddenFields();
                    
                    // Create initial overlay (no generation selected yet)
                    createButtonsOverlay();
                    
                    // Mark as initialized
                    window.__aiGenerationState.isInitialized = true;
                    
                    console.log('✅ AI generation functionality initialized (interactive mode)');
                } else {
                    console.log('✅ AI notification displayed (theme editor preview mode)');
                }
            }, 500);
        }

        // Only show debug div if there's relevant data or if on a product page
        if (aiConverterData.productId || getPageType() === 'product' || aiConverterData.enableForAllPages) {
            createDebugDiv();
        }

        // Log AI status with visual feedback
        if (shouldShowAI) {
            if (isThemeEditor() && !aiConverterData.aiEnabled) {
                console.log('%c🎨 AI GENERATION ENABLED (THEME EDITOR DEMO) 🎨', 'color: #ffa500; font-size: 16px; font-weight: bold;');
            } else {
                console.log('%c🎨 AI GENERATION ENABLED FOR THIS PRODUCT! 🎨', 'color: #00ff88; font-size: 16px; font-weight: bold;');
            }
        } else if (aiConverterData.aiEnabled === false && isProductPage()) {
            console.log('%c❌ AI Generation is DISABLED for this product', 'color: #ff4757; font-size: 14px; font-weight: bold;');
        }
    }

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
</script><!-- AI Generation is enabled for this product -->